{"ast":null,"code":"/**\r\n * Utility functions for date formatting\r\n */\n\n/**\r\n * Format solar date for display\r\n * @param {string} dateSolar - The solar date string\r\n * @returns {string} - Formatted date or fallback text\r\n */\nexport const formatSolarDate = dateSolar => {\n  if (!dateSolar) {\n    return 'Chưa xác định';\n  }\n\n  // Check if it's a special case (not a real date)\n  if (dateSolar === 'Tùy theo ngày khởi công' || dateSolar === 'Tùy theo ngày sinh') {\n    return dateSolar;\n  }\n  try {\n    const date = new Date(dateSolar);\n    // Check if date is valid\n    if (isNaN(date.getTime())) {\n      return dateSolar; // Return original string if invalid\n    }\n    return date.toLocaleDateString('vi-VN');\n  } catch (error) {\n    console.error('Error formatting date:', error);\n    return dateSolar; // Return original string if error\n  }\n};\n\n/**\r\n * Check if a date string is a valid date\r\n * @param {string} dateString - The date string to check\r\n * @returns {boolean} - True if valid date, false otherwise\r\n */\nexport const isValidDate = dateString => {\n  if (!dateString) return false;\n  if (dateString === 'Tùy theo ngày khởi công' || dateString === 'Tùy theo ngày sinh') {\n    return false; // These are not actual dates\n  }\n  const date = new Date(dateString);\n  return !isNaN(date.getTime());\n};","map":{"version":3,"names":["formatSolarDate","dateSolar","date","Date","isNaN","getTime","toLocaleDateString","error","console","isValidDate","dateString"],"sources":["C:/Users/ManhQuang/Music/ISP/Code/frontend/src/utils/dateUtils.js"],"sourcesContent":["/**\r\n * Utility functions for date formatting\r\n */\r\n\r\n/**\r\n * Format solar date for display\r\n * @param {string} dateSolar - The solar date string\r\n * @returns {string} - Formatted date or fallback text\r\n */\r\nexport const formatSolarDate = (dateSolar) => {\r\n  if (!dateSolar) {\r\n    return 'Chưa xác định';\r\n  }\r\n  \r\n  // Check if it's a special case (not a real date)\r\n  if (dateSolar === 'Tùy theo ngày khởi công' || dateSolar === 'Tùy theo ngày sinh') {\r\n    return dateSolar;\r\n  }\r\n  \r\n  try {\r\n    const date = new Date(dateSolar);\r\n    // Check if date is valid\r\n    if (isNaN(date.getTime())) {\r\n      return dateSolar; // Return original string if invalid\r\n    }\r\n    return date.toLocaleDateString('vi-VN');\r\n  } catch (error) {\r\n    console.error('Error formatting date:', error);\r\n    return dateSolar; // Return original string if error\r\n  }\r\n};\r\n\r\n/**\r\n * Check if a date string is a valid date\r\n * @param {string} dateString - The date string to check\r\n * @returns {boolean} - True if valid date, false otherwise\r\n */\r\nexport const isValidDate = (dateString) => {\r\n  if (!dateString) return false;\r\n  if (dateString === 'Tùy theo ngày khởi công' || dateString === 'Tùy theo ngày sinh') {\r\n    return false; // These are not actual dates\r\n  }\r\n  \r\n  const date = new Date(dateString);\r\n  return !isNaN(date.getTime());\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,eAAe,GAAIC,SAAS,IAAK;EAC5C,IAAI,CAACA,SAAS,EAAE;IACd,OAAO,eAAe;EACxB;;EAEA;EACA,IAAIA,SAAS,KAAK,yBAAyB,IAAIA,SAAS,KAAK,oBAAoB,EAAE;IACjF,OAAOA,SAAS;EAClB;EAEA,IAAI;IACF,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,SAAS,CAAC;IAChC;IACA,IAAIG,KAAK,CAACF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,EAAE;MACzB,OAAOJ,SAAS,CAAC,CAAC;IACpB;IACA,OAAOC,IAAI,CAACI,kBAAkB,CAAC,OAAO,CAAC;EACzC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAON,SAAS,CAAC,CAAC;EACpB;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMQ,WAAW,GAAIC,UAAU,IAAK;EACzC,IAAI,CAACA,UAAU,EAAE,OAAO,KAAK;EAC7B,IAAIA,UAAU,KAAK,yBAAyB,IAAIA,UAAU,KAAK,oBAAoB,EAAE;IACnF,OAAO,KAAK,CAAC,CAAC;EAChB;EAEA,MAAMR,IAAI,GAAG,IAAIC,IAAI,CAACO,UAAU,CAAC;EACjC,OAAO,CAACN,KAAK,CAACF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC;AAC/B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}